
version: 2.1
executors:
  alpine:
    docker:
      - image: alpine:3.10
    working_directory: ~/dockerfile-ci
    environment:
      ALPINE_VERSION: '3.10'
      CI_REGISTRY: 'unifio/ci'
      CI_MAJOR_VERSION: '5'
      COVALENCE_REGISTRY: 'unifio/covalence'
      COVALENCE_VERSION: '0.9.7'
      DUMBINIT_VERSION: '1.2.2'
      GOSU_VERSION: '1.11'
      NODE_VERSION: '10.16.1'
      PACKER_REGISTRY: 'unifio/packer'
      PACKER_VERSION: '1.4.5'
      RUBY_VERSION: '2.5.5'
      SOPS_VERSION: '3.3.1'
      TERRAFORM_REGISTRY: 'unifio/terraform'
      TERRAFORM_VERSION: '0.12.17'
      PREFIXOUT_VERSION: '0.1.0'
      BUNDLER_VERSION: '1.17.3'

jobs:
  build_covalence:
    executor: alpine
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.09.3
      - run:
          name: Install dependencies
          command: |
            apk update && apk add --no-cache \
              curl \
              ca-certificates \
              curl-dev \
              docker \
              build-base \
              python3-dev \
              gcc \
              libffi-dev \
              docker-compose;
              # pip
              echo "**** install pip ****" && \
              python3 -m ensurepip && \
              rm -r /usr/lib/python*/ensurepip && \
              pip3 install --no-cache --upgrade pip setuptools wheel && \
              pip3 install --no-cache --upgrade --ignore-installed awscli
      - restore_cache:
          keys:
            - dock2-cov-layer-cache-{{ .Branch }}
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load < /caches/cov.tar | true
            docker images
      - run:
          name: Build Covalence image
          command: |
            docker-compose build covalence
      - run:
          name: Execute acceptance test
          command: |
            docker run -i --name uat --entrypoint /bin/sh \
              -e CHECKPOINT_DISABLE=1 \
              -e COVALENCE_TEST_ENVS=uat \
              -e AWS_DEFAULT_REGION=us-east-1 \
              -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
              -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
              ${COVALENCE_REGISTRY} &
            sleep 10
            docker start uat
            docker cp tools/covalence/uat/. uat:/data
            docker exec uat sh -c "apk add --no-cache --update unzip && \
              wget -q \"https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip\" && \
              unzip -d /usr/local/bin terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
            docker exec uat sh -c 'rake ci'
            docker exec uat sh -c 'rake uat:apply'
            docker exec uat sh -c 'rake uat:destroy'
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches /workspace
            docker images -a
            docker save $(docker images -aq) > /caches/cov.tar
            docker save unifio/covalence > /workspace/cov.tar
      - save_cache:
          key: dock2-cov-layer-cache-{{ .Branch }}-{{ checksum "/caches/cov.tar" }}
          paths:
            - /caches/cov.tar
      - deploy:
          name: Register Covalence image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag $COVALENCE_REGISTRY $COVALENCE_REGISTRY:$COVALENCE_VERSION
              docker push $COVALENCE_REGISTRY
            fi
      - persist_to_workspace:
          root: /workspace
          paths:
            - cov.tar

  build_terraform:
    executor: alpine
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.09.3
      - run:
          name: Install dependencies
          command: |
            apk update && apk add --no-cache \
              curl \
              ca-certificates \
              curl-dev \
              docker \
              build-base \
              python3-dev \
              gcc \
              libffi-dev
            python3 -m ensurepip && \
            rm -r /usr/lib/python*/ensurepip && \
            pip3 install --upgrade pip setuptools && \
            if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip; fi && \
            if [[ ! -e /usr/bin/python ]]; then ln -sf /usr/bin/python3 /usr/bin/python; fi && \
            pip install --upgrade \
              docker-compose
      - restore_cache:
          keys:
            - dock2-tf-layer-cache-{{ .Branch }}
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load < /caches/tf.tar | true
            docker images
      - run:
          name: Build Terraform image
          command: |
            docker-compose build terraform
      - run:
          name: Execute acceptance test
          command: |
            docker run -i --name uat --entrypoint /bin/sh \
              -e CHECKPOINT_DISABLE=1 \
              -e AWS_DEFAULT_REGION=us-east-1 \
              -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
              -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
              ${TERRAFORM_REGISTRY} &
            sleep 10
            docker start uat
            docker cp tools/terraform/uat/. uat:/data
            docker exec uat sh -c 'terraform init -input=false'
            docker exec uat sh -c 'terraform plan -input=false'
            docker exec uat sh -c 'terraform apply -input=false -auto-approve'
            docker exec uat sh -c 'terraform destroy -force'
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches /workspace
            docker images -a
            docker save $(docker images -aq) > /caches/tf.tar
            docker save unifio/terraform > /workspace/tf.tar
      - save_cache:
          key: dock2-tf-layer-cache-{{ .Branch }}-{{ checksum "/caches/tf.tar" }}
          paths:
            - /caches/tf.tar
      - deploy:
          name: Register Terraform image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag $TERRAFORM_REGISTRY $TERRAFORM_REGISTRY:$TERRAFORM_VERSION
              docker push $TERRAFORM_REGISTRY
            fi
      - persist_to_workspace:
          root: /workspace
          paths:
            - tf.tar

  build_packer:
    executor: alpine
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.09.3
      - run:
          name: Install dependencies
          command: |
            apk update && apk add --no-cache \
              curl \
              docker \
              build-base \
              python3-dev \
              gcc \
              libffi-dev\
              openssl-dev
            python3 -m ensurepip && \
            rm -r /usr/lib/python*/ensurepip && \
            pip3 install --upgrade pip setuptools && \
            if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip; fi && \
            if [[ ! -e /usr/bin/python ]]; then ln -sf /usr/bin/python3 /usr/bin/python; fi && \
            curl -O https://bootstrap.pypa.io/get-pip.py
            python get-pip.py
            pip install --upgrade \
              docker-compose
      - restore_cache:
          keys:
            - dock2-pkr-layer-cache-{{ .Branch }}
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load < /caches/pkr.tar | true
            docker images
      - run:
          name: Build Packer image
          command: |
            docker-compose build packer
      - run:
          name: Execute acceptance test
          command: |
            docker run -i --name uat --entrypoint /bin/sh \
              -e CHECKPOINT_DISABLE=1 \
              -e AWS_DEFAULT_REGION=us-east-1 \
              -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
              -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
              ${PACKER_REGISTRY} &
            sleep 10
            docker start uat
            docker cp tools/packer/uat/. uat:/data
            docker exec uat sh -c "packer validate -var version=${CIRCLE_BUILD_NUM} uat-aws.json"
            docker exec uat sh -c "packer build -var version=${CIRCLE_BUILD_NUM} uat-aws.json"
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches /workspace
            docker images -a
            docker save $(docker images -aq) > /caches/pkr.tar
            docker save unifio/packer > /workspace/pkr.tar
      - save_cache:
          key: dock2-pkr-layer-cache-{{ .Branch }}-{{ checksum "/caches/pkr.tar" }}
          paths:
            - /caches/pkr.tar
      - deploy:
          name: Register Packer image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag $PACKER_REGISTRY $PACKER_REGISTRY:$PACKER_VERSION
              docker push $PACKER_REGISTRY
            fi
      - persist_to_workspace:
          root: /workspace
          paths:
            - pkr.tar

  build_ci_infra:
    executor: alpine
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.09.3
      - run:
          name: Install dependencies
          command: |
            apk update && apk add --no-cache \
              curl \
              ca-certificates \
              curl-dev \
              docker \
              build-base \
              python3-dev \
              gcc \
              libffi-dev \
              libxml2-dev \
              libxslt-dev \
              ruby \
              ruby-bundler \
              ruby-dev \
              ruby-io-console \
              ruby-json \
              tar \
              bash \
              docker-compose
            python3 -m ensurepip && \
            rm -r /usr/lib/python*/ensurepip && \
            pip3 install --upgrade pip setuptools && \
            if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip; fi && \
            if [[ ! -e /usr/bin/python ]]; then ln -sf /usr/bin/python3 /usr/bin/python; fi && \
            echo "**** install pip python 3 apps here if needed ****"
            gem install bundler:${BUNDLER_VERSION} --no-document
      - attach_workspace:
          at: /workspace
      - restore_cache:
          keys:
            - dock2-ci-infra-layer-cache-{{ .Branch }}
      - restore_cache:
          keys:
            - gem1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gem1-{{ arch }}-{{ .Branch }}
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load < /caches/ci-infra.tar | true
            docker load < /workspace/tf.tar | true
            docker load < /workspace/pkr.tar | true
            docker images
      - run:
          name: Copy binaries from upstream containers
          environment:
            COPY_NODE_BINS: 'false'
          command: |
            ./copybins.sh
      - run:
          name: Build CI infrastructure image
          command: |
            docker-compose build ci-infra
      - run:
          name: Execute container tests
          command: |
            bundle check --path=/caches/bundle || bundle install --path=/caches/bundle --jobs=4 --retry=3
            bundle exec rspec --format progress --format RspecJunitFormatter -o ~/rspec/container/rspec.xml spec/infra_spec.rb
      - store_test_results:
          path: ~/rspec
      - run:
          name: Execute acceptance test
          command: |
            docker run -i --name uat --entrypoint /bin/sh \
              -e CHECKPOINT_DISABLE=1 \
              -e COVALENCE_TEST_ENVS=uat \
              -e AWS_DEFAULT_REGION=us-east-1 \
              -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
              -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
              ${CI_REGISTRY}:latest &
            sleep 10
            docker start uat
            docker cp tools/covalence/uat/. uat:/data
            docker exec uat sh -c 'bundle exec rake ci'
            docker exec uat sh -c 'bundle exec rake uat:apply'
            docker exec uat sh -c 'bundle exec rake uat:destroy'
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker images -a
            docker save $(docker images -aq) > /caches/ci-infra.tar
      - save_cache:
          key: dock2-ci-infra-layer-cache-{{ .Branch }}-{{ checksum "/caches/ci-infra.tar" }}
          paths:
            - /caches/ci-infra.tar
      - save_cache:
          key: gem1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - /caches/bundle
      - deploy:
          name: Register CI infrastructure image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag $CI_REGISTRY:latest $CI_REGISTRY:latest-ruby
              docker tag $CI_REGISTRY:latest $CI_REGISTRY:$CI_MAJOR_VERSION.0.$CIRCLE_BUILD_NUM
              docker tag $CI_REGISTRY:latest $CI_REGISTRY:$CI_MAJOR_VERSION.0.$CIRCLE_BUILD_NUM-ruby-$RUBY_VERSION
              docker push $CI_REGISTRY
            fi

  build_ci_node:
    executor: alpine
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.09.3
      - run:
          name: Install dependencies
          command: |
            apk update && apk add --no-cache \
              curl \
              ca-certificates \
              curl-dev \
              docker \
              build-base \
              python3-dev \
              gcc \
              libffi-dev \
              libxml2-dev \
              libxslt-dev \
              ruby \
              ruby-bundler \
              ruby-dev \
              ruby-io-console \
              ruby-json \
              tar \
              bash \
              docker-compose
            python3 -m ensurepip && \
            rm -r /usr/lib/python*/ensurepip && \
            pip3 install --upgrade pip setuptools && \
            if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip; fi && \
            if [[ ! -e /usr/bin/python ]]; then ln -sf /usr/bin/python3 /usr/bin/python; fi && \
            echo "**** install pip python 3 apps here if needed ****"
            gem install bundler:${BUNDLER_VERSION} --no-document
      - attach_workspace:
          at: /workspace
      - restore_cache:
          keys:
            - dock2-ci-node-layer-cache-{{ .Branch }}
      - restore_cache:
          keys:
            - gem1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gem1-{{ arch }}-{{ .Branch }}
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load < /caches/ci-node.tar | true
            docker load < /workspace/tf.tar | true
            docker load < /workspace/pkr.tar | true
            docker images
      - run:
          name: Copy binaries from upstream containers
          environment:
            COPY_NODE_BINS: 'false'
          command: |
            ./copybins.sh
      - run:
          name: Build CI Node.js image
          command: |
            docker-compose build ci-node
      - run:
          name: Execute container tests
          command: |
            bundle check --path=/caches/bundle || bundle install --path=/caches/bundle --jobs=4 --retry=3
            bundle exec rspec --format progress --format RspecJunitFormatter -o ~/rspec/container/rspec.xml spec/node_spec.rb
      - store_test_results:
          path: ~/rspec
      - run:
          name: Execute acceptance test
          command: |
            docker run -i --name uat --entrypoint /bin/sh \
              -e CHECKPOINT_DISABLE=1 \
              -e COVALENCE_TEST_ENVS=uat \
              -e AWS_DEFAULT_REGION=us-east-1 \
              -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
              -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
              ${CI_REGISTRY}:latest-node &
            sleep 10
            docker start uat
            sed -i "s/uat/uat2/" tools/covalence/uat/data/stacks/vpc.yaml
            docker cp tools/covalence/uat/. uat:/data
            docker exec uat sh -c 'bundle exec rake ci'
            docker exec uat sh -c 'bundle exec rake uat:apply'
            docker exec uat sh -c 'bundle exec rake uat:destroy'
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker images -a
            docker save $(docker images -aq) > /caches/ci-node.tar
      - save_cache:
          key: dock2-ci-node-layer-cache-{{ .Branch }}-{{ checksum "/caches/ci-node.tar" }}
          paths:
            - /caches/ci-node.tar
      - save_cache:
          key: gem1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - /caches/bundle
      - deploy:
          name: Register CI Node.js image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag $CI_REGISTRY:latest-node $CI_REGISTRY:$CI_MAJOR_VERSION.0.$CIRCLE_BUILD_NUM-node-$NODE_VERSION
              docker push $CI_REGISTRY
            fi

workflows:
  version: 2
  ci_container_pipeline:
    jobs:
      - build_covalence
      - build_terraform
      - build_packer
      - build_ci_infra:
          requires:
            - build_terraform
            - build_packer
      - build_ci_node:
          requires:
            - build_terraform
            - build_packer
